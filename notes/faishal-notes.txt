************* KEYBOARD DRIVER *****************
1) Command Queue and State Machine
    -> Commands must be sent one at a time, and only complete till ACK received, try three times or failure
    -> The simplest way to achieve this is for the driver to maintain a queue of commands. When you add a command to the queue,
       if the queue is empty you start sending the command; otherwise you append the command to the queue.
       When you receive an "0xFA (ACK)" from the keyboard you discard the command at the head of the queue and start sending the next 
       command in the queue (if any). If you receive an "0xFE (Resend)" from the keyboard you can resend the command at the head of the queue.

2) Scan Code Sets, Scan Codes and Key Codes
    -> A scan code set is a set of codes that determine when a key is pressed or repeated, or released, default is 2
    -> There is no standard for "key codes" - it's something you have to make up or invent for your OS. I personally like the idea of having an 
       8-bit key code where the highest 3 bits determine which row on the keyboard and the lowest 5 bits determine which column 
       (essentially, the keyboard is treated as a grid of up to 8 rows and up to 32 columns of keys). 

3) Key Codes, Key States and Key Mappings
    ->  you'd want an array of flags, where each flag corresponds to a key code. There is a hidden bonus here - 
        the keyboard driver itself can use the same "array of flags" to determine if a shift key, control key, alt key, etc is down,
    -> Once you're able to keep track of which keys are currently being pressed, the next step is to (attempt to) convert the key into 
       an ASCII character or Unicode code point. At this point you need to know what type of keyboard the user has - is it "US QWERTY"
    -> The final step of processing is to combine all relevant information into some sort of "keypress packet" structure, and send it to whomever (e.g. GUI).
      The entire "keypress packet" might include the following:
          * Unicode code point (if applicable)
          * Key code
          * Pressed/released flag
          * Various other key states (shift, alt, control, etc)
          * Various "toggle" states (CapsLock, ScrollLock, NumberLock, etc)


************* GLOBAL DESCRIPTION TABLE(GDT) *****************
-> Segment, Segment Selector, and Segment Descriptor
-> Segment Selector: A reference to a descriptor, which you can load into a segment register; the selector is an offset into a descriptor table pointing to one of its entries.
                    These entries are typically 8 bytes long, therefore bits 3 and up only declare the descriptor table entry offset, while bit 2 specifies if this selector is a GDT or LDT selector 
                    (LDT - bit set, GDT - bit cleared), and bits 0 - 1 declare the ring level that needs to correspond to the descriptor table entry's DPL field
